Future selectPhoto()async{
    final result = await FilePicker.platform.pickFiles();

    if(result==null) return;

    setState(() {
      pickedFile = result.files.first;
      //Text(pickedFile!.name),
    });
  }

  Future uploadFile()async{
    if (pickedFile == null) {
      // Handle the case where pickedFile is null
      print('No file was picked.');
      return;
    }

    final path = '/Trucks/GDN 8547/Incident Reports/${pickedFile!.name}';
    final file = File('${pickedFile!.path}');

    final ref = FirebaseStorage.instance.ref().child(path);
    setState(() {
      uploadTask = ref.putFile(file);
    });

    final snapshot = await uploadTask!.whenComplete(() {});

    final urlDownload = await snapshot.ref.getDownloadURL();
    print("Download link ${urlDownload}");

    setState(() {
      uploadTask = null;
    });

  }





import 'package:flutter/material.dart';
import 'package:haul_a_day_mobile/bottomTab.dart';



class IncidentReport extends StatefulWidget {
  @override
  _IncidentReportState createState() => _IncidentReportState();
}


class _IncidentReportState extends State<IncidentReport> {
  int _currentIndex = 0;

  //single select list for incidentType
  List<String> incidentType =['Accident', 'Mechanical Failure', 'Roadside Incident', 'Others'];
  late String? selectedIncidentType;
  TextEditingController mechanicName = TextEditingController();
  final _formField = GlobalKey<FormState>();



  @override
  void initState() {
    super.initState();
    selectedIncidentType = null; // Set default selection
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[200],
      appBar: AppBar(
        backgroundColor: Colors.green[300],
        title: Text(
          'Create Incident Report',
          style: TextStyle(
            color: Colors.white,
            fontSize: 24,
            fontWeight: FontWeight.bold,
          ),
        ),
        centerTitle: true,
        leading: IconButton(
          icon: Icon(
            Icons.arrow_back,
            color: Colors.white,
          ),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
      ),
      body:ReportForm(),
        bottomNavigationBar: BottomTab(currIndex: _currentIndex)
    );
  }

  Widget ReportForm(){
    return SingleChildScrollView(
      child: Column(
        children: [
          //progress bar
          SizedBox(
            height: 20, // Set the height to 30
            child: Row(
              children: [
                Expanded(
                  flex: 1,
                  child: Container(
                    color: Colors.green,
                  ),
                ),
                Expanded(
                  flex: 1,
                  child: Container(
                    color: Colors.grey[300],
                  ),
                ),
              ],
            ),
          ),


          SizedBox(height: 10),

          //type of incident
          Row(
            children: [
              SizedBox(width: 10),
              Text(
                'Type of Incident',
                style: TextStyle(
                  color: Colors.black,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              Text(
                '*',
                style: TextStyle(
                  color: Colors.red,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          SizedBox(height: 5),
          SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: Row(
              children: List.generate(incidentType.length, (index) {
                final incident = incidentType[index];
                return Padding(
                    padding: EdgeInsets.symmetric(horizontal: 4), // Add horizontal spacing
                    child: Container(
                      width: 135,
                      child: ElevatedButton(
                        onPressed: () {
                          setState(() {
                            if (selectedIncidentType == null) {
                              selectedIncidentType = incident;
                            } else {
                              selectedIncidentType = (selectedIncidentType == incident ? null : incident)!;
                            }
                          });
                        },
                        style: ButtonStyle(
                          backgroundColor: MaterialStateProperty.resolveWith<Color>(
                                (Set<MaterialState> states) {
                              if (states.contains(MaterialState.pressed)) {
                                // return light blue when pressed
                                return Colors.green[200]!;
                              }
                              // return blue when not pressed
                              return selectedIncidentType == incident ? Colors.green[700]! : Colors.green[300]!;
                            },
                          ),
                          minimumSize: MaterialStateProperty.all<Size>(Size(60, 60)),
                          shape: MaterialStateProperty.all<RoundedRectangleBorder>(
                            RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10.0), // Adjust the radius as needed
                            ),
                          ),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 8), // Add horizontal padding
                          child: Text(
                            incident,
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                            textAlign: TextAlign.center, // Align text to the center
                          ),
                        ),
                      ),
                    )
                );
              }),
            ),
          ),

          SizedBox(height: 20),

          //name
          Row(
            children: [
              SizedBox(width: 10),
              Text(
                'Name of Mechanic or Repair Shop',
                style: TextStyle(
                  color: Colors.black,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              Text(
                '*',
                style: TextStyle(
                  color: Colors.red,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          Center(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: TextFormField(
                controller: mechanicName,
                decoration: InputDecoration(
                  labelText: 'Enter Name', // Placeholder text
                  border: OutlineInputBorder(), // Add border
                  filled: true,
                  fillColor: Colors.white,
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a name';
                  }
                  return null; // Return null if the input is valid
                },
              ),
            ),
          ),
          SizedBox(height: 20),

          //documentation
          Row(
            children: [
              SizedBox(width: 10),
              Text(
                'Documentation',
                style: TextStyle(
                  color: Colors.black,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              Text(
                '*',
                style: TextStyle(
                  color: Colors.red,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          SizedBox(height: 10),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton.icon(
                onPressed: () {

                  setState(() {

                  });
                },
                style: ButtonStyle(
                  backgroundColor: MaterialStateProperty.resolveWith<Color>(
                        (Set<MaterialState> states) {
                      if (states.contains(MaterialState.pressed)) {
                        // return light blue when pressed
                        return Colors.green[200]!;
                      }
                      // return blue when not pressed
                      return Colors.green[300]!;
                    },
                  ),
                  minimumSize: MaterialStateProperty.all<Size>(Size(60, 50)),
                  shape: MaterialStateProperty.all<RoundedRectangleBorder>(
                    RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(
                          10.0), // Adjust the radius as needed
                    ),
                  ),
                ),
                icon: Icon(Icons.cloud_upload_outlined, color: Colors.white,), // Icon widget
                label: Text(
                  'Upload a Photo',
                  style: TextStyle(color: Colors.white, fontSize: 14, fontWeight: FontWeight.bold), // Set text color
                ),
              ),
              SizedBox(width: 10),
              ElevatedButton.icon(
                onPressed: () {
                  setState(() {
                    // Add your onPressed logic here
                  });
                },
                style: ButtonStyle(
                  backgroundColor: MaterialStateProperty.resolveWith<Color>(
                        (Set<MaterialState> states) {
                      if (states.contains(MaterialState.pressed)) {
                        // return light blue when pressed
                        return Colors.green[200]!;
                      }
                      // return blue when not pressed
                      return Colors.green[300]!;
                    },
                  ),
                  minimumSize: MaterialStateProperty.all<Size>(Size(60, 50)),
                  shape: MaterialStateProperty.all<RoundedRectangleBorder>(
                    RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(
                          10.0), // Adjust the radius as needed
                    ),
                  ),
                ),
                icon: Icon(Icons.camera_alt_outlined, color: Colors.white,), // Icon widget
                label: Text(
                  'Take a Photo',
                  style: TextStyle(color: Colors.white, fontSize: 14, fontWeight: FontWeight.bold), // Set text color
                ),
              ),
            ],
          ),
          SizedBox(height: 20),

          //description
          Row(
            children: [
              SizedBox(width: 10),
              Text(
                'Description of Incident',
                style: TextStyle(
                  color: Colors.black,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              Text(
                '*',
                style: TextStyle(
                  color: Colors.red,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          Center(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: TextField(
                maxLines: null, // Allow text to wrap to the next line
                textInputAction: TextInputAction
                    .newline, // Enable Return key to insert a newline
                decoration: InputDecoration(
                  labelText: 'Enter your text',  // Placeholder text
                  border: OutlineInputBorder(), // Add border
                  filled: true,
                  fillColor: Colors.white,
                  contentPadding: EdgeInsets.symmetric(
                      vertical: 60.0, horizontal: 12.0), // Adjust padding
                ),
              ),
            ),
          ),
          SizedBox(height: 20),


          ElevatedButton(
            onPressed: () {
              print(_validateForm());
              if(_formField.currentState!.validate()&&_validateForm()){
                print('YES');
              }else{
                print('No');
              }
              // Add your onPressed logic here
            },
            style: ButtonStyle(
              backgroundColor: MaterialStateProperty.resolveWith<Color>(
                    (Set<MaterialState> states) {
                  if (states.contains(MaterialState.pressed)) {
                    // return light blue when pressed
                    return Colors.green[200]!;
                  }
                  // return blue when not pressed
                  return Colors.green[700]!;
                },
              ),
              minimumSize: MaterialStateProperty.all<Size>(Size(200, 50)),
              shape: MaterialStateProperty.all<RoundedRectangleBorder>(
                RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(
                      10.0), // Adjust the radius as needed
                ),
              ),
            ),
            child: Text(
              'Next',
              style: TextStyle(
                color: Colors.white,
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ), // Set text color
            ),
          ),
          SizedBox(height: 20),
        ],
      ),
    );
  }

  bool _validateForm() {

    if(selectedIncidentType == null ||
        selectedIncidentType!.isEmpty){
      return false;
    }else{
      return true;
    }
  }




}
